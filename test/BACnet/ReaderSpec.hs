module BACnet.ReaderSpec where

import Test.HUnit
import Test.Hspec
import Test.QuickCheck
import BACnet.Reader
import Data.Word
import Data.Int


spec :: Spec
spec = do
  describe "readNullAP" $
    it "reads [0x00] and returns ())" $
      run readNullAP [0x00] `shouldBe` ()

  describe "readBoolAP" $
    it "reads [0x10] and returns False" $
      run readBoolAP [0x10] `shouldBe` False

  describe "readBoolAP" $
    it "reads [0x11] and returns True" $
      run readBoolAP [0x11] `shouldBe` True

  describe "readUnsignedAP" $ do
    it "reads [0x21, 0x00] and returns 0" $
      run readUnsignedAP [0x21, 0x00] `shouldBe` 0

    it "reads [0x22, 0x01, 0x00] and returns 256" $
      run readUnsignedAP [0x22, 0x01, 0x00] `shouldBe` 256

    it "reads [0x22, 0xFF, 0xFF] and returns 65535" $
      run readUnsignedAP [0x22, 0xFF, 0xFF] `shouldBe` 65535

    it "reads [0x23, 0x01, 0x00, 0x00] and returns 65536" $
      run readUnsignedAP [0x23, 0x01, 0x00, 0x00] `shouldBe`
        65536

    it "reads [0x23, 0xFF, 0xFF, 0xFF] and returns 16777215" $
      run readUnsignedAP [0x23, 0xFF, 0xFF, 0xFF] `shouldBe`
        16777215

    it "reads [0x25, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, x0ff] and returns 4294967296" $
      run readUnsignedAP [0x25, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff]
        `shouldBe` 4294967296

  describe "readSignedAP" $ do
    it "reads [0x31, 0x00] and returns 0" $
      run readSignedAP [0x31, 0x00] `shouldBe` 0

    it "reads [0x31, 0xFF] and returns -1" $
      run readSignedAP [0x31, 0xFF] `shouldBe` -1

    it "reads [0x31, 0xFE] and returns -2" $
      run readSignedAP [0x31, 0xFE] `shouldBe` -2

    it "reads [0x32, 0x00, 0x80] and returns 128" $
      run readSignedAP [0x32, 0x00, 0x80] `shouldBe` 128

    it "reads [0x32, 0x80, 0x00] and returns -32768" $
      run readSignedAP [0x32, 0x80, 0x00] `shouldBe` (-32768)

    it "reads [0x32, 0x7F, 0xFF] and returns 32767" $
      run readSignedAP [0x32, 0x7F, 0xFF] `shouldBe` 32767

    it "reads [0x32, 0xFF, 0x7F] and returns -129" $
      run readSignedAP [0x32, 0xFF, 0x7F] `shouldBe` (-129)

    it "reads [0x33, 0x00, 0x80, 0x00] and returns 32768" $
      run readSignedAP [0x33, 0x00, 0x80, 0x00] `shouldBe` 32768

    it "reads [0x33, 0x7F, 0xFF, 0xFF] and returns 8388607" $
      run readSignedAP [0x33, 0x7F, 0xFF, 0xFF] `shouldBe` 8388607

    it "reads [0x33, 0x80, 0x00, 0x00] and returns -8388608" $
      run readSignedAP [0x33, 0x80, 0x00, 0x00] `shouldBe` (-8388608)

  describe "readFloatAP" $
    it "reads [0x44, 0x00, 0x00, 0x00, 0x01] and returns 1.4e-45" $
      run readRealAP [0x44, 0x00, 0x00, 0x00, 0x01] `shouldBe` 1.4e-45

  describe "readDoubleAP" $
    it "reads [0x55, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa] and returns 4.9e-324" $
      run readDoubleAP [0x55, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa]
        `shouldBe` 4.9e-324


  describe "readOctetStringAP" $
    it ("reads [0x65, 0x08, 0x01, 0x02, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xff, 0xee] and " ++
       "returns [0x01, 0x02, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0]") $
       run readOctetStringAP [0x65, 0x08, 0x01, 0x02, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xff, 0xee]
       `shouldBe` [0x01, 0x02, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xff]
